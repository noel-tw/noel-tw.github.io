{
  "openapi": "3.0.1",
  "info": {
    "title": "Ceridian Dayforce v1 Direct API",
    "contact": {
      "name": "Customer Support",
      "url": "https://Ryvit.com",
      "email": "support@Ryvit.com"
    },
    "version": "1"
  },
  "servers": [
    {
      "url": "https://api.xchange.trimble.com/connect/v1/",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/direct/actions/{action_key_value}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get an Action instance.",
        "operationId": "GET /direct/actions/{action_key_value}",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "$ref": "#/components/parameters/action_key_value"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Action Identifier"
                    },
                    "data": {
                      "type": "object",
                      "description": "Contains the input object to the Action POST call."
                    },
                    "dataObjectCode": {
                      "type": "string",
                      "description": "Data Object Code"
                    },
                    "actionCode": {
                      "type": "string",
                      "description": "Action Code"
                    },
                    "subscriberCode": {
                      "type": "string",
                      "description": "Subscriber Code"
                    },
                    "createdUtc": {
                      "type": "string",
                      "description": "Action Created Date"
                    },
                    "status": {
                      "enum": [
                        "Queued",
                        "Processing",
                        "Failed",
                        "Successful"
                      ],
                      "type": "string",
                      "description": "Action Status"
                    },
                    "result": {
                      "type": "string",
                      "description": "This object definition is defined on each Action POST.  See Responses: \"x-$.result for Successful\" and \"x-$.result for Failed\" for the specific action based on the $.dataObjectCode and $.actionCode properties."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache": {
      "get": {
        "tags": [
          "Employee Pay Summaries"
        ],
        "summary": "Gets all Employee Pay Summaries objects from the cache.",
        "description": "Retrieve employee pay summaries between two dates. Pay summaries represent timesheet data used to calculate gross pays.",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "$ref": "#/components/parameters/limit_continuation"
          },
          {
            "$ref": "#/components/parameters/modifiedUTCSince"
          },
          {
            "$ref": "#/components/parameters/continuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "limit",
                    "data",
                    "next",
                    "continuationToken"
                  ],
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/data_emp-pay-summaries_withKeys"
                      }
                    },
                    "next": {
                      "type": "string"
                    },
                    "continuationToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/errorResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/search": {
      "post": {
        "tags": [
          "Employee Pay Summaries"
        ],
        "summary": "Search through Employee Pay Summaries objects in the data cache",
        "description": "Retrieve employee pay summaries between two dates. Pay summaries represent timesheet data used to calculate gross pays.",
        "operationId": "POST /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/search/search",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "modifiedUtcAfter": {
                    "maxLength": 28,
                    "minLength": 28,
                    "type": "string",
                    "description": "Returns objects that were modified after the specified date (ISO 8601 format).  Format: yyyy-MM-ddThh:mm:ss.fffffffZ.  Example '2019-12-11T20:16:58.3419275Z'.  If provided on the first call, the same value must be provided on all subsequent calls as you use the continuation token for the next result set.",
                    "format": "date-time"
                  },
                  "modifiedUtcBefore": {
                    "maxLength": 28,
                    "minLength": 28,
                    "type": "string",
                    "description": "Returns objects that were modified before the specified date (ISO 8601 format).  Format: yyyy-MM-ddThh:mm:ss.fffffffZ.  Example '2019-12-11T20:16:58.3419275Z'.  If provided on the first call, the same value must be provided on all subsequent calls as you use the continuation token for the next result set.",
                    "format": "date-time"
                  },
                  "continuationToken": {
                    "type": "string",
                    "description": "Supplying this token will result in retrieving the next chunk of data if the first request contained more than 100 (up to) records or greater than 1 megabyte in size.  On your first call, you must omit or provide an empty string.  On subsequent calls, provide the continuationToken from the previous result."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "integer",
                              "description": "You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "Equal",
                                "GreaterThan",
                                "GreaterThanOrEqual",
                                "LessThan",
                                "LessThanOrEqual",
                                "NotEqual"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        },
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "string",
                              "description": "You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "Equal",
                                "GreaterThan",
                                "GreaterThanOrEqual",
                                "LessThan",
                                "LessThanOrEqual",
                                "NotEqual",
                                "Like",
                                "EndsWith",
                                "StartsWith",
                                "Contains"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        },
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "boolean",
                              "description": "You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "Equal",
                                "NotEqual"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        },
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "description": " This oneOf option is to be used for null values for all data types.  You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "In"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        }
                      ]
                    },
                    "description": "All provided filters are combined with AND conditions. E.g. filter1 AND filter2 AND filter3.  Not providing a filter will result in an unfiltered result.  Filtering can be performed on nested object properties but can not be performed on array item properties.  If provided on the first call, the same value must be provided on all subsequent calls as you use the continuation token for the next result set."
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "count",
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/data_emp-pay-summaries_withKeys"
                      }
                    },
                    "continuationToken": {
                      "type": "string",
                      "description": "Supply this token on the next request to get the next chunk of data. This will have a value if the result set contains more than 100 records or the set is greater than 1 megabyte."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/errorResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/{ryvitId_value}": {
      "get": {
        "tags": [
          "Employee Pay Summaries"
        ],
        "summary": "Gets one Employee Pay Summaries object from the cache.",
        "description": "Retrieve employee pay summaries between two dates. Pay summaries represent timesheet data used to calculate gross pays.",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/{ryvitId_value}",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "name": "ryvitId_value",
            "in": "path",
            "description": "The code of the data object you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_emp-pay-summaries_withKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/__ryvitId/{ryvitId_value}": {
      "get": {
        "tags": [
          "Employee Pay Summaries"
        ],
        "summary": "Gets one Employee Pay Summaries object from the cache.",
        "description": "Retrieve employee pay summaries between two dates. Pay summaries represent timesheet data used to calculate gross pays.",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/__ryvitId/{ryvitId_value}",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "name": "ryvitId_value",
            "in": "path",
            "description": "The code of the data object you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_emp-pay-summaries_withKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/natural/{EmployeeXRefCode}/{PunchSegmentStart}": {
      "get": {
        "tags": [
          "Employee Pay Summaries"
        ],
        "summary": "Gets one Employee Pay Summaries object from the cache.",
        "description": "Retrieve employee pay summaries between two dates. Pay summaries represent timesheet data used to calculate gross pays.",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/emp-pay-summaries/cache/natural/{EmployeeXRefCode,PunchSegmentStart}",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "name": "EmployeeXRefCode",
            "in": "path",
            "description": "The EmployeeXRefCode portion of the key used to identify the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PunchSegmentStart",
            "in": "path",
            "description": "The PunchSegmentStart portion of the key used to identify the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_emp-pay-summaries_withKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets all Projects objects from the cache.",
        "description": "Client Projects",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "$ref": "#/components/parameters/limit_continuation"
          },
          {
            "$ref": "#/components/parameters/modifiedUTCSince"
          },
          {
            "$ref": "#/components/parameters/continuationToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "limit",
                    "data",
                    "next",
                    "continuationToken"
                  ],
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/data_projects_withKeys"
                      }
                    },
                    "next": {
                      "type": "string"
                    },
                    "continuationToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/errorResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/search": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Search through Projects objects in the data cache",
        "description": "Client Projects",
        "operationId": "POST /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/search/search",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "modifiedUtcAfter": {
                    "maxLength": 28,
                    "minLength": 28,
                    "type": "string",
                    "description": "Returns objects that were modified after the specified date (ISO 8601 format).  Format: yyyy-MM-ddThh:mm:ss.fffffffZ.  Example '2019-12-11T20:16:58.3419275Z'.  If provided on the first call, the same value must be provided on all subsequent calls as you use the continuation token for the next result set.",
                    "format": "date-time"
                  },
                  "modifiedUtcBefore": {
                    "maxLength": 28,
                    "minLength": 28,
                    "type": "string",
                    "description": "Returns objects that were modified before the specified date (ISO 8601 format).  Format: yyyy-MM-ddThh:mm:ss.fffffffZ.  Example '2019-12-11T20:16:58.3419275Z'.  If provided on the first call, the same value must be provided on all subsequent calls as you use the continuation token for the next result set.",
                    "format": "date-time"
                  },
                  "continuationToken": {
                    "type": "string",
                    "description": "Supplying this token will result in retrieving the next chunk of data if the first request contained more than 100 (up to) records or greater than 1 megabyte in size.  On your first call, you must omit or provide an empty string.  On subsequent calls, provide the continuationToken from the previous result."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "integer",
                              "description": "You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "Equal",
                                "GreaterThan",
                                "GreaterThanOrEqual",
                                "LessThan",
                                "LessThanOrEqual",
                                "NotEqual"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        },
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "string",
                              "description": "You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "Equal",
                                "GreaterThan",
                                "GreaterThanOrEqual",
                                "LessThan",
                                "LessThanOrEqual",
                                "NotEqual",
                                "Like",
                                "EndsWith",
                                "StartsWith",
                                "Contains"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        },
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "boolean",
                              "description": "You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "Equal",
                                "NotEqual"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        },
                        {
                          "required": [
                            "propertyName",
                            "value",
                            "operator"
                          ],
                          "type": "object",
                          "properties": {
                            "propertyName": {
                              "type": "string",
                              "description": "Name of the property to apply the filter on. Nested properties are supported with a dot (.) delimiter.  E.g. 'PONumber' or 'Sender.LastName'."
                            },
                            "value": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "description": " This oneOf option is to be used for null values for all data types.  You must match the JSON type value to the propertyName JSON type.  There is no type coercion."
                            },
                            "operator": {
                              "enum": [
                                "In"
                              ],
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "description": ""
                        }
                      ]
                    },
                    "description": "All provided filters are combined with AND conditions. E.g. filter1 AND filter2 AND filter3.  Not providing a filter will result in an unfiltered result.  Filtering can be performed on nested object properties but can not be performed on array item properties.  If provided on the first call, the same value must be provided on all subsequent calls as you use the continuation token for the next result set."
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "count",
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/data_projects_withKeys"
                      }
                    },
                    "continuationToken": {
                      "type": "string",
                      "description": "Supply this token on the next request to get the next chunk of data. This will have a value if the result set contains more than 100 records or the set is greater than 1 megabyte."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/errorResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/{ryvitId_value}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets one Projects object from the cache.",
        "description": "Client Projects",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/{ryvitId_value}",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "name": "ryvitId_value",
            "in": "path",
            "description": "The code of the data object you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_projects_withKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/__ryvitId/{ryvitId_value}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets one Projects object from the cache.",
        "description": "Client Projects",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/__ryvitId/{ryvitId_value}",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "name": "ryvitId_value",
            "in": "path",
            "description": "The code of the data object you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_projects_withKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/id/{ProjectXRefCode}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets one Projects object from the cache.",
        "description": "Client Projects",
        "operationId": "GET /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/cache/id/{ProjectXRefCode}",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          },
          {
            "name": "ProjectXRefCode",
            "in": "path",
            "description": "The ProjectXRefCode portion of the key used to identify the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_projects_withKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/actions/add": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Executes the Add action for the Projects data object.",
        "description": "Create a Client Project",
        "operationId": "POST /direct/subscribers/{subscriber_code}/ceridian/dayforce/1/data/projects/actions/add",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriber_code"
          },
          {
            "$ref": "#/components/parameters/X-Application-Key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ProjectXRefCode": {
                    "type": "string"
                  },
                  "ShortName": {
                    "type": "string"
                  },
                  "CreationOrgUnitXRefCodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ClockTransferCode": {
                    "type": "string"
                  },
                  "ProjectPriority": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "AccountNum": {
                    "type": "string"
                  },
                  "IFRSClassification": {
                    "type": "boolean"
                  },
                  "LongName": {
                    "type": "string"
                  },
                  "LedgerCode": {
                    "type": "string"
                  },
                  "CertifiedPayrollProjectNumber": {
                    "type": "string"
                  },
                  "ProjectClientXRefCode": {
                    "type": "string"
                  },
                  "ProjectTypeXRefCode": {
                    "type": "string"
                  },
                  "ProjectPhaseXRefCode": {
                    "type": "string"
                  },
                  "ProductGroupXRefCode": {
                    "type": "string"
                  },
                  "ProductModuleXRefCode": {
                    "type": "string"
                  },
                  "StartDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "DueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "BudgetHours": {
                    "type": "number",
                    "format": "double"
                  },
                  "BudgetAmount": {
                    "type": "number",
                    "format": "double"
                  },
                  "EmployeeAssignment": {
                    "type": "object",
                    "properties": {
                      "IsAssignedAll": {
                        "type": "boolean"
                      },
                      "XrefCodes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "DeptJobAssignment": {
                    "type": "object",
                    "properties": {
                      "IsAssignedAll": {
                        "type": "boolean"
                      },
                      "XrefCodes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "DepartmentAssignment": {
                    "type": "object",
                    "properties": {
                      "IsAssignedAll": {
                        "type": "boolean"
                      },
                      "XrefCodes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "CompletedDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "PctComplete": {
                    "type": "number",
                    "format": "double"
                  },
                  "IsDeleted": {
                    "type": "boolean"
                  },
                  "PayCodeXRefCodeChargeToHours": {
                    "type": "object",
                    "properties": {
                      "IsAssignedAll": {
                        "type": "boolean"
                      },
                      "XrefCodes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "PayCodeXRefCodeChargeToAmount": {
                    "type": "object",
                    "properties": {
                      "IsAssignedAll": {
                        "type": "boolean"
                      },
                      "XrefCodes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "ParentProjectXRefCode": {
                    "type": "string"
                  },
                  "TaxLocationAddressXRefCode": {
                    "type": "string"
                  },
                  "IsResidentAddressUsedForTaxation": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/errorResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauth"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "x-$.result for Successful": {
            "description": "Object returned at $.result from GET /direct/actions/{action_key_value} when $.status = \"Successful\"",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ProjectsPostResponseXRefCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "x-$.result for Failed": {
            "description": "Object returned at $.result from GET /direct/actions/{action_key_value} when $.status = \"Failed\"",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "errorSchema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "target": {
                      "title": "Describes which field in the request has an issue.",
                      "type": "string"
                    },
                    "message": {
                      "title": "The error message describing the issue.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "data_emp-pay-summaries": {
        "type": "object",
        "properties": {
          "EmployeeXRefCode": {
            "type": "string"
          },
          "PositionXRefCode": {
            "type": "string"
          },
          "DepartmentXRefCode": {
            "type": "string"
          },
          "JobXRefCode": {
            "type": "string"
          },
          "PayCodeXRefCode": {
            "type": "string"
          },
          "PayCategoryXRefCode": {
            "type": "string"
          },
          "PayDate": {
            "type": "string",
            "format": "date-time"
          },
          "BusinessDate": {
            "type": "string",
            "format": "date-time"
          },
          "TimeStart": {
            "type": "string",
            "format": "date-time"
          },
          "TimeEnd": {
            "type": "string",
            "format": "date-time"
          },
          "PunchSegmentStart": {
            "type": "string",
            "format": "date-time"
          },
          "LocationXRefCode": {
            "type": "string"
          },
          "NetHours": {
            "type": "number",
            "format": "double"
          },
          "MinuteDuration": {
            "type": "integer",
            "format": "int32"
          },
          "Rate": {
            "type": "number",
            "format": "double"
          },
          "PayAmount": {
            "type": "number",
            "format": "double"
          },
          "IsPremium": {
            "type": "boolean"
          },
          "ProjectXRefCode": {
            "type": "string"
          },
          "DocketXRefCode": {
            "type": "string"
          },
          "PieceQuantity": {
            "type": "number",
            "format": "double"
          },
          "LaborMetricsCode0XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode1XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode2XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode3XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode4XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode5XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode6XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode7XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode8XRefCode": {
            "type": "string"
          },
          "LaborMetricsCode9XRefCode": {
            "type": "string"
          }
        }
      },
      "data_emp-pay-summaries_withKeys": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "__ryvitKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["natural/{EmployeeXRefCode}/{PunchSegmentStart}"]
              },
              "__modifiedUTC": {
                "type": "string",
                "example": "2020-01-01T13:01:01.1234567Z"
              }
            }
          },
          {
            "$ref": "#/components/schemas/data_emp-pay-summaries"
          }
        ]
      },
      "data_projects": {
        "type": "object",
        "properties": {
          "ProjectXRefCode": {
            "type": "string"
          },
          "ShortName": {
            "type": "string"
          },
          "ParentProjectXRefCode": {
            "type": "string"
          },
          "CreationOrgUnitXRefCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "DueDate": {
            "type": "string",
            "format": "date-time"
          },
          "LongName": {
            "type": "string"
          },
          "ClockTransferCode": {
            "type": "string"
          },
          "ProjectPriority": {
            "type": "integer",
            "format": "int32"
          },
          "AccountNum": {
            "type": "string"
          },
          "LedgerCode": {
            "type": "string"
          },
          "IFRSClassification": {
            "type": "boolean"
          },
          "CertifiedPayrollProjectNumber": {
            "type": "string"
          },
          "CompletedDate": {
            "type": "string",
            "format": "date-time"
          },
          "PctComplete": {
            "type": "number",
            "format": "double"
          },
          "BudgetHours": {
            "type": "number",
            "format": "double"
          },
          "BudgetAmount": {
            "type": "number",
            "format": "double"
          },
          "ProjectClientXRefCode": {
            "type": "string"
          },
          "ProjectTypeXRefCode": {
            "type": "string"
          },
          "ProjectPhaseXRefCode": {
            "type": "string"
          },
          "ProductGroupXRefCode": {
            "type": "string"
          },
          "ProductModuleXRefCode": {
            "type": "string"
          },
          "Deleted": {
            "type": "boolean"
          },
          "TaxLocationAddressXRefCode": {
            "type": "string"
          },
          "ChildProjectXRefCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "EmployeeXRefCodes": {
            "type": "object",
            "properties": {
              "IsAssignedAll": {
                "type": "boolean"
              },
              "XrefCodes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "DeptJobXRefCodes": {
            "type": "object",
            "properties": {
              "IsAssignedAll": {
                "type": "boolean"
              },
              "XrefCodes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "DepartmentXRefCodes": {
            "type": "object",
            "properties": {
              "IsAssignedAll": {
                "type": "boolean"
              },
              "XrefCodes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "PayCodeXRefCodeChargeToHours": {
            "type": "object",
            "properties": {
              "IsAssignedAll": {
                "type": "boolean"
              },
              "XrefCodes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "PayCodeXRefCodeChargeToAmount": {
            "type": "object",
            "properties": {
              "IsAssignedAll": {
                "type": "boolean"
              },
              "XrefCodes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "IsResidentAddressUsedForTaxation": {
            "type": "boolean"
          }
        }
      },
      "data_projects_withKeys": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "__ryvitKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["id/{ProjectXRefCode}"]
              },
              "__modifiedUTC": {
                "type": "string",
                "example": "2020-01-01T13:01:01.1234567Z"
              }
            }
          },
          {
            "$ref": "#/components/schemas/data_projects"
          }
        ]
      }
    },
    "responses": {
      "unauth": {
        "description": "You have not provided a proper X-Application-Key in the header of this request."
      },
      "forbidden": {
        "description": "The X-Application-Key provided is valid but the key does not have access to this resource."
      },
      "notFound": {
        "description": "The object with the given ID was not found OR a subscriber with the given URL was not found."
      },
      "errorResponse": {
        "description": "Describes issues with the request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorSchema"
            }
          }
        }
      }
    },
    "parameters": {
      "X-Application-Key": {
        "name": "X-Application-Key",
        "in": "header",
        "description": "Used to authorize access to the Direct API.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "subscriber_code": {
        "name": "subscriber_code",
        "in": "path",
        "description": "The code of the subscriber that you are making this request for.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "action_key_value": {
        "name": "action_key_value",
        "in": "path",
        "description": "Action Instance Identifier.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Limits the number of records returned by the API, up to a maximum of 1,000.",
        "schema": {
          "type": "integer"
        }
      },
      "limit_continuation": {
        "name": "limit",
        "in": "query",
        "description": "Limits the number of records returned by the API, up to a maximum of 1,000.  The API may return less than the limit even when more records exist.  Always examine the 'next' and 'continuationToken' properties to determin if more records are available.",
        "schema": {
          "type": "integer"
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Offsets the number of records returned by the API.",
        "schema": {
          "type": "integer"
        }
      },
      "modifiedUTCSince": {
        "name": "modifiedUTCSince",
        "in": "query",
        "description": "A string specifies a datetime against which to filter the results. When specified the result will be ordered oldest __modifiedUTC to newest.  Example 2019-12-11T20:16:58.3419275Z. Optional. If unspecified, all cached objects will be returned.",
        "schema": {
          "type": "string"
        }
      },
      "continuationToken": {
        "name": "continuationToken",
        "in": "query",
        "description": "A URL Encoded continuationToken value from a previous GET response.  When provided, the next set of results for the original GET will be returned.",
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "security": [
    { }
  ],
  "tags": [
    {
      "name": "Ceridian Dayforce v1 Direct API"
    }
  ]
}
